{"version":3,"sources":["Game/moves.js","Game/Game.js","components/Settings/Settings.js","Game/images.js","components/Setup/Cell.js","components/Setup/DnDBoard.js","components/Setup/Ship.js","components/Setup/Setup.js","util/useAudio.js","components/WinScreen/WinScreen.js","components/Play/Board.js","components/Play/Play.js","components/ChangeScreen/ChangeScreen.js","components/GameRenderer.js","components/Home/Home.js","components/Help/Help.js","components/Credits/Credits.js","App.js","reportWebVitals.js","index.js"],"names":["setBoardSize","G","ctx","size","INVALID_MOVE","MIN_BOARD_SIZE","MAX_BOARD_SIZE","i","boards","length","Array","fill","createBoards","numPlayers","board","j","push","Game","name","setup","message","type","text","player1Name","player2Name","shipsPlayer1","shipsPlayer2","shipAmounts","carriers","battleships","cruisers","submarines","destroyers","sunkShipsP1","sunkShipsP2","turn","order","TurnOrder","RESET","phases","settings","start","next","moves","setPlayerNames","playerNum","playerName","setShipAmounts","submitShips","ships","currentPlayer","events","endTurn","endPhase","play","clickCell","coords","targetPlayer","x","y","isInsideBounds","targetsShips","targetName","shipHit","find","ship","hits","sunk","resetGame","setPhase","clearMessage","endIf","Settings","game","player1NameGame","player2NameGame","initialShipAmounts","gridSizeGame","useState","setPlayer1Name","setPlayer2Name","gridSize","setGridSize","setCarriers","setBattleships","setCruisers","setSubmarines","setDestroyers","error","setError","checkShipAmount","amount","amounts","to","title","className","src","id","htmlFor","value","onChange","e","target","checkGridSize","parseInt","valueAsNumber","min","onClick","Object","values","reduce","acc","curr","SHIP_IMAGES","getShipImage","index","shipParts","Cell","squareText","isOuter","grid","isHorizontal","nthCell","GRID_SIDE_SIZE","dropShip","canPlace","isDragging","useDrop","accept","ItemTypes","SHIP","drop","item","canDrop","canDropShip","collect","monitor","isOver","showDenied","ref","DnDBoard","setShips","setGrid","rerenders","setRerenders","chars","boardStyle","display","width","gridTemplateColumns","gridTemplateRows","margin","backgroundImage","useEffect","createGrid","squares","rows","isHighlighted","drawShipsOnBoard","coord","shipCoord","newShip","prev","style","map","row","cell","Ship","setNthCell","setIsDragging","dropped","setDropped","getShipSize","useDrag","end","didDrop","drag","imageArr","opacity","fontSize","fontWeight","cursor","flexDirection","from","v","onMouseDown","Setup","props","totalShips","setIsHorizontal","onDown","preventDefault","key","window","addEventListener","removeEventListener","DndProvider","backend","HTML5Backend","flexWrap","arr","keys","shipType","renderDraggableShips","disabled","undo","useSfx","url","volume","Audio","audio","playing","setPlaying","pause","currentTime","WinScreen","setShowWinScreen","Board","isOwnBoard","ownShips","Math","random","getShipAtCoords","renderShip","findIndex","c","showShip","cellIsSunk","cellClassName","outer","clicked","isHit","hitShip","gameIsOver","cellOnClick","Play","showWinScreen","playHit","playSunk","playGameOver","timeouts","setTimeout","forEach","t","clearTimeout","ChangeScreen","hide","GameRenderer","showOverlay","setShowOverlay","useLayoutEffect","phase","Home","Help","Credits","App","GameComponent","Client","debug","bgMusicRef","useRef","current","basename","path","exact","autoPlay","loop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de56c367.chunk.js","sourcesContent":["import { INVALID_MOVE } from \"boardgame.io/core\";\r\nimport { createBoards, MAX_BOARD_SIZE, MIN_BOARD_SIZE } from \"./Game\";\r\n\r\n/**\r\n * Function that sets the player names in the game.\r\n * @param {Object} G used by boardgame.io, represents game state\r\n * @param {Object} ctx used by boardgame.io, represents game metadata\r\n * @param {Number} playerNum  number of the player whose name is being set\r\n * @param {String} playerName name that is being set for the player\r\n */\r\nexport const setPlayerNames = (G, ctx, playerNum, playerName) => {\r\n  if (playerNum === 1) {\r\n    G.player1Name = playerName || \"Pelaaja 1\";\r\n  } else if (playerNum === 2) {\r\n    G.player2Name = playerName || \"Pelaaja 2\";\r\n  }\r\n};\r\n\r\n/**\r\n * Function that sets the board size.\r\n * @param {Object} G used by boardgame.io, represents game state\r\n * @param {Object} ctx used by boardgame.io, represents game metadata\r\n * @param {Number} size size that is being set for the board\r\n * @returns INVALID_MOVE (boardgame.io's way of invalidating a move) if the size is not allowed\r\n */\r\nexport const setBoardSize = (G, ctx, size) => {\r\n  if (typeof size !== \"number\") return INVALID_MOVE;\r\n  if (size < MIN_BOARD_SIZE || size > MAX_BOARD_SIZE) return INVALID_MOVE;\r\n\r\n  for (let i = 0; i < G.boards.length; i++) {\r\n    G.boards[i] = Array(size).fill(Array(size).fill(null));\r\n  }\r\n};\r\n\r\n/**\r\n * Function that sets the ship amounts.\r\n * This function also checks the validity of the ship amounts, even though the validity is also checked in\r\n * the Settings.js file. The criteria for valid ship amounts is documented in said file.\r\n * The validity is checked twice for extra security.\r\n * @param {Object} G used by boardgame.io, represents game state\r\n * @param {Object} ctx used by boardgame.io, represents game metadata\r\n * @param {Object} shipAmounts that contains key-value-pairs for each ship type\r\n * @returns INVALID_MOVE if the ship amounts are not valid\r\n */\r\nexport const setShipAmounts = (G, ctx, shipAmounts) => {\r\n  const size = G.boards[0][0].length;\r\n\r\n  // Checking whether the ship amounts are valid\r\n  if (\r\n    shipAmounts.carriers * 5 +\r\n      shipAmounts.battleships * 4 +\r\n      shipAmounts.cruisers * 3 +\r\n      shipAmounts.submarines * 3 +\r\n      shipAmounts.destroyers * 2 >\r\n    (size * size) / 2\r\n  )\r\n    return INVALID_MOVE;\r\n\r\n  if (\r\n    shipAmounts.carriers < 0 ||\r\n    shipAmounts.battleships < 0 ||\r\n    shipAmounts.cruisers < 0 ||\r\n    shipAmounts.submarines < 0 ||\r\n    shipAmounts.destroyers < 0\r\n  )\r\n    return INVALID_MOVE;\r\n\r\n  // Setting the ship values once it has been checked that they are valid\r\n  G.shipAmounts.carriers = shipAmounts.carriers;\r\n  G.shipAmounts.battleships = shipAmounts.battleships;\r\n  G.shipAmounts.cruisers = shipAmounts.cruisers;\r\n  G.shipAmounts.submarines = shipAmounts.submarines;\r\n  G.shipAmounts.destroyers = shipAmounts.destroyers;\r\n};\r\n\r\n/**\r\n * Called when placed ships for a player are submitted\r\n */\r\nexport const submitShips = (G, ctx, ships) => {\r\n  if (ctx.currentPlayer === \"0\") {\r\n    G.shipsPlayer1 = ships;\r\n    ctx.events.endTurn();\r\n  } else {\r\n    G.shipsPlayer2 = ships;\r\n    ctx.events.endPhase();\r\n  }\r\n};\r\n\r\n/**\r\n * Returns true if coordinates are inside the game board\r\n */\r\nconst isInsideBounds = (G, coords, playerNum) => {\r\n  const { x, y } = coords;\r\n\r\n  if (x < 0 || x >= G.boards[playerNum].length) return false;\r\n  if (y < 0 || y >= G.boards[playerNum][x].length) return false;\r\n\r\n  return true;\r\n};\r\n\r\n/**\r\n * Called when a player clicks on a cell during the 'play' phase.\r\n */\r\nexport const shootAt = (G, ctx, { coords, targetPlayer }) => {\r\n  if (!isInsideBounds(G, coords, targetPlayer)) return INVALID_MOVE;\r\n\r\n  /*\r\n   * Variables for the coordinates of the cell that's being shot,\r\n   * the target's board, their ships and their name in the game\r\n   */\r\n  const { x, y } = coords;\r\n  const board = G.boards[targetPlayer];\r\n  const targetsShips = targetPlayer == 0 ? G.shipsPlayer1 : G.shipsPlayer2;\r\n  const targetName = targetPlayer == 0 ? G.player1Name : G.player2Name;\r\n\r\n  if (board[x][y] !== null) return INVALID_MOVE;\r\n  board[x][y] = true;\r\n\r\n  /*\r\n   * Function to find whether there's a ship in the cell that's being shoot at\r\n   */\r\n  const shipHit = targetsShips.find((ship) =>\r\n    ship.coords.find((coords) => coords.x - 1 === x && coords.y - 1 === y)\r\n  );\r\n\r\n  if (shipHit) {\r\n    shipHit.hits += 1;\r\n    //if ship has as many hits as its length, it has sunk\r\n    if (shipHit.hits == shipHit.coords.length) {\r\n      // show message to players\r\n      G.message.type = \"sunk\";\r\n      G.message.text = `Upotit pelaajan ${targetName} laivan`;\r\n\r\n      // increment amount of ships sunk\r\n      targetPlayer == 0 ? G.sunkShipsP1++ : G.sunkShipsP2++;\r\n\r\n      // add 'sunk' value to ship\r\n      shipHit.sunk = true;\r\n\r\n      // if the array for the target's sunk ships is\r\n      // as long as the list of all of their ships, the player wins\r\n      if (G.sunkShipsP1 === targetsShips.length) {\r\n        G.message.text = `Voitit pelin!`;\r\n        G.message.type = \"gameOver\";\r\n      }\r\n      if (G.sunkShipsP2 === targetsShips.length) {\r\n        G.message.text = `Voitit pelin!`;\r\n        G.message.type = \"gameOver\";\r\n      }\r\n    } else {\r\n      G.message.type = \"hit\";\r\n      G.message.text = `Osuit pelaajan ${targetName} laivaan`;\r\n    }\r\n  } else {\r\n    G.message.type = \"nohit\";\r\n    G.message.text = \"\";\r\n    ctx.events.endTurn();\r\n  }\r\n};\r\n\r\n/**\r\n * Function to reset the game when the players want to play a new game\r\n * @param {Object} G used by boardgame.io, represents game state\r\n * @param {Object} ctx used by boardgame.io, represents game metadata\r\n */\r\nexport const resetGame = (G, ctx) => {\r\n  G.boards = createBoards(ctx);\r\n  G.shipsPlayer1 = [];\r\n  G.shipsPlayer2 = [];\r\n  G.sunkShipsP1 = 0;\r\n  G.sunkShipsP2 = 0;\r\n  G.message.text = \"\";\r\n  G.message.type = \"nohit\";\r\n  ctx.events.setPhase(\"settings\");\r\n};\r\n\r\n/**\r\n * Function to clear the message\r\n * @param {Object} G used by boardgame.io, represents game state\r\n * @param {Object} ctx used by boardgame.io, represents game metadata\r\n */\r\nexport const clearMessage = (G, ctx) => {\r\n  G.message.text = \"\";\r\n  G.message.type = \"\";\r\n};\r\n","import { TurnOrder } from \"boardgame.io/core\";\r\n\r\nimport {\r\n  clearMessage,\r\n  resetGame,\r\n  setBoardSize,\r\n  setPlayerNames,\r\n  setShipAmounts,\r\n  shootAt,\r\n  submitShips,\r\n} from \"./moves\";\r\n\r\nexport const DEFAULT_BOARD_SIZE = 10; // initial size of board\r\nexport const MAX_BOARD_SIZE = 10;\r\nexport const MIN_BOARD_SIZE = 5;\r\n\r\n/**\r\n * Creates two, two-dimensional arrays reprsenting the battleship boards\r\n * for game state. Called in setup.\r\n * @param {Object} ctx\r\n * @returns\r\n */\r\nexport const createBoards = (ctx) => {\r\n  let boards = [];\r\n\r\n  for (let i = 0; i < ctx.numPlayers; i++) {\r\n    const board = [];\r\n\r\n    for (let j = 0; j < DEFAULT_BOARD_SIZE; j++) {\r\n      board.push(Array(DEFAULT_BOARD_SIZE).fill(null));\r\n    }\r\n\r\n    boards.push(board);\r\n  }\r\n\r\n  return boards;\r\n};\r\n\r\nconst Game = {\r\n  // The name of the game.\r\n  name: \"Laivanupotus\",\r\n\r\n  /* Setup the empty game board */\r\n  setup: (ctx) => {\r\n    return {\r\n      message: {\r\n        type: \"nohit\",\r\n        text: \"\",\r\n      },\r\n      boards: createBoards(ctx),\r\n      player1Name: \"Pelaaja 1\",\r\n      player2Name: \"Pelaaja 2\",\r\n      shipsPlayer1: [],\r\n      shipsPlayer2: [],\r\n      shipAmounts: {\r\n        carriers: 1,\r\n        battleships: 1,\r\n        cruisers: 2,\r\n        submarines: 2,\r\n        destroyers: 3,\r\n      },\r\n      sunkShipsP1: 0,\r\n      sunkShipsP2: 0,\r\n    };\r\n  },\r\n\r\n  turn: {\r\n    order: TurnOrder.RESET, // Reset to player 1 when phase changes\r\n  },\r\n\r\n  phases: {\r\n    // players choose the game settings during this phase\r\n    settings: {\r\n      start: true, // start game at this phase\r\n      next: \"setup\",\r\n      moves: {\r\n        setPlayerNames,\r\n        setBoardSize,\r\n        setShipAmounts,\r\n      },\r\n    },\r\n\r\n    // players place their ships during this phase\r\n    setup: {\r\n      next: \"play\", // name of next phase\r\n      moves: {\r\n        submitShips,\r\n        setBoardSize,\r\n      },\r\n    },\r\n\r\n    // players fight during this phase\r\n    play: {\r\n      moves: {\r\n        clickCell: shootAt,\r\n        resetGame,\r\n        clearMessage,\r\n      },\r\n    },\r\n  },\r\n\r\n  /* Checks if the game should end */\r\n  endIf: (G, ctx) => {\r\n    // TODO: tarkista onko peli loppunut\r\n  },\r\n};\r\n\r\nexport default Game;\r\n","import { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Settings.css\";\r\n\r\n/**\r\n * Settings-component represents a game phase, where the players fill in their names,\r\n * board size and ship amounts\r\n * @param {Object} game boardgame.io\r\n * @returns Settings-element that describes what will show on the screen\r\n */\r\nconst Settings = ({ game }) => {\r\n  /*\r\n   * Variables for the player names, board size and ship amounts.\r\n   * Variables describe the values in the game, not inside the Settings-component\r\n   */\r\n  const {\r\n    player1Name: player1NameGame,\r\n    player2Name: player2NameGame,\r\n    boards,\r\n    shipAmounts: initialShipAmounts,\r\n  } = game.G;\r\n  const gridSizeGame = boards[0].length;\r\n\r\n  /*\r\n   * Variables for the aforementioned values inside the Settings-component\r\n   * Functions to change the values of these variables\r\n   */\r\n  const [player1Name, setPlayer1Name] = useState(player1NameGame);\r\n  const [player2Name, setPlayer2Name] = useState(player2NameGame);\r\n  const [gridSize, setGridSize] = useState(gridSizeGame);\r\n  const [carriers, setCarriers] = useState(initialShipAmounts.carriers);\r\n  const [battleships, setBattleships] = useState(\r\n    initialShipAmounts.battleships\r\n  );\r\n  const [cruisers, setCruisers] = useState(initialShipAmounts.cruisers);\r\n  const [submarines, setSubmarines] = useState(initialShipAmounts.submarines);\r\n  const [destroyers, setDestroyers] = useState(initialShipAmounts.destroyers);\r\n\r\n  /*\r\n   * Variable for an error-message and a function to change its value\r\n   * Error-message is shown if the grid size or ship amounts are invalid\r\n   */\r\n  const [error, setError] = useState(\"\");\r\n\r\n  /*\r\n   * Object, that contains the amount of ships for each ship type\r\n   */\r\n  const shipAmounts = {\r\n    carriers,\r\n    battleships,\r\n    cruisers,\r\n    submarines,\r\n    destroyers,\r\n  };\r\n\r\n  /**\r\n   * Function that checks whether the ship amounts are valid.\r\n   * Valid ship amounts meet the following citeria:\r\n   * 1) The combined area of the ships is at most half of the area of the game board\r\n   * 2) Each ship type's amount is positive\r\n   * @param {String} type the ship type of the ship whose value is being changed\r\n   * @param {Number} amount the proposed new value for the amount of said ship type\r\n   * @returns false, if the criteria is not met; true, if the criteria is met\r\n   */\r\n  const checkShipAmount = (type, amount) => {\r\n    const amounts = { ...shipAmounts, [type]: amount };\r\n    // Checks criteria 1\r\n    if (\r\n      amounts.carriers * 5 +\r\n        amounts.battleships * 4 +\r\n        amounts.cruisers * 3 +\r\n        amounts.submarines * 3 +\r\n        amounts.destroyers * 2 >\r\n      (gridSize * gridSize) / 2\r\n    ) {\r\n      setError(\r\n        \"Et voi lisätä enempää laivoja ellet suurenna pelilaudan kokoa tai poista joitakin laivoja\"\r\n      );\r\n      return false;\r\n    }\r\n\r\n    //Checks criteria 2\r\n    if (\r\n      amounts.carriers < 0 ||\r\n      amounts.battleships < 0 ||\r\n      amounts.cruisers < 0 ||\r\n      amounts.submarines < 0 ||\r\n      amounts.destroyers < 0\r\n    )\r\n      return false;\r\n\r\n    // Resets error message to empty when all criteria is met\r\n    setError(\"\");\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Function that checks whether the board size is valid.\r\n   * Valid board size meets the following criteria:\r\n   * 1) The combined area of the ships is at most half of the area of the game board\r\n   * 2) The board size is at least 5 and at most 10\r\n   * @param {Number} gridSize the proposed new value for the board size\r\n   * @returns false, if the criteria is not met; true, if the criteria is met\r\n   */\r\n  const checkGridSize = (gridSize) => {\r\n    // Checks criteria 1, criteria must be checked both when updating ship amount and when updating grid size!!\r\n    if (\r\n      shipAmounts.carriers * 5 +\r\n        shipAmounts.battleships * 4 +\r\n        shipAmounts.cruisers * 3 +\r\n        shipAmounts.submarines * 3 +\r\n        shipAmounts.destroyers * 2 >\r\n      (gridSize * gridSize) / 2\r\n    ) {\r\n      setError(\r\n        \"Et voi pienentää pelilaudan kokoa, ellet poista joitakin laivoja\"\r\n      );\r\n      return false;\r\n    }\r\n    // Checks criteria 2\r\n    else if (gridSize < 5 || gridSize > 10) {\r\n      setError(\"Pelilaudan koon on oltava väliltä 5-10\");\r\n      return false;\r\n    }\r\n    // Resets error message to empty when all criteria is met\r\n    setError(\"\");\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Functions to update the board size and amounts of different ship types in the GUI.\r\n   * Calls the checkGridSize-function with argument new inputted value, or\r\n   * Calls the checkShipAmount-function with arguments ship type and new inputted value.\r\n   * If the check-function returns true, the new value is updated to the GUI.\r\n   * @param {Event} e\r\n   */\r\n  const updateGridSize = (e) => {\r\n    const fits = checkGridSize(parseInt(e.target.value));\r\n    if (fits) setGridSize(e.target.valueAsNumber);\r\n  };\r\n\r\n  const updateCarriers = (e) => {\r\n    const fits = checkShipAmount(\"carriers\", parseInt(e.target.value));\r\n    if (fits) setCarriers(e.target.valueAsNumber);\r\n  };\r\n\r\n  const updateBattleships = (e) => {\r\n    const fits = checkShipAmount(\"battleships\", parseInt(e.target.value));\r\n    if (fits) setBattleships(e.target.valueAsNumber);\r\n  };\r\n\r\n  const updateCruisers = (e) => {\r\n    const fits = checkShipAmount(\"cruisers\", parseInt(e.target.value));\r\n    if (fits) setCruisers(e.target.valueAsNumber);\r\n  };\r\n\r\n  const updateSubmarines = (e) => {\r\n    const fits = checkShipAmount(\"submarines\", parseInt(e.target.value));\r\n    if (fits) setSubmarines(e.target.valueAsNumber);\r\n  };\r\n\r\n  const updateDestroyers = (e) => {\r\n    const fits = checkShipAmount(\"destroyers\", parseInt(e.target.value));\r\n    if (fits) setDestroyers(e.target.valueAsNumber);\r\n  };\r\n\r\n  /**\r\n   * Function that updates the player names, board size and ship amounts\r\n   * in the game to match the values inputted in the GUI.\r\n   * Function also ends the Settings-phase.\r\n   */\r\n  const submit = () => {\r\n    // Checks that the players have added at least one ship to the game\r\n    const sum = Object.values(shipAmounts).reduce((acc, curr) => acc + curr, 0);\r\n    if (sum <= 0) {\r\n      setError(\"Laivoja on oltava enemmän kuin nolla!\");\r\n      return;\r\n    }\r\n    game.moves.setPlayerNames(1, player1Name);\r\n    game.moves.setPlayerNames(2, player2Name);\r\n    game.moves.setBoardSize(parseInt(gridSize));\r\n    game.moves.setShipAmounts(shipAmounts);\r\n    game.events.endPhase();\r\n  };\r\n\r\n  const reset = () => {\r\n    game.moves.resetGame();\r\n  };\r\n\r\n  /**\r\n   * The layout of the Settings-component\r\n   */\r\n  return (\r\n    <div>\r\n      <Link to=\"/\">\r\n        <button title=\"Takaisin\" className=\"back-button\">\r\n          <img src=\"./icons/arrow-left.svg\" />\r\n        </button>\r\n      </Link>\r\n      <h1 className=\"title\">Pelin asetukset</h1>\r\n      <div id=\"settings-container\">\r\n        <p id=\"settings-help\">\r\n          Jotta kaikki laivat mahtuvat pelilaudalle, on laivojen yhteenlasketun\r\n          pinta-alan oltava enintään puolet pelilaudan koosta. Sinulle näytetään\r\n          virheviesti, jos joku arvo ei ole sopiva. <br></br> Voit vaihtaa\r\n          kaikki arvot takaisin oletusarvoiksi painamalla \"Nollaa arvot\"-nappia.\r\n        </p>\r\n        <div className=\"settingsDiv\">\r\n          <div className=\"labelInput\">\r\n            <label className=\"settingsLabel\" htmlFor=\"player1Name\">\r\n              Pelaajan 1 nimi:{\" \"}\r\n            </label>\r\n            <input\r\n              className=\"settingsInput long\"\r\n              type=\"text\"\r\n              id=\"player1Name\"\r\n              value={player1Name}\r\n              onChange={(e) => setPlayer1Name(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"labelInput\">\r\n            <label className=\"settingsLabel\" htmlFor=\"player2Name\">\r\n              Pelaajan 2 nimi:{\" \"}\r\n            </label>\r\n            <input\r\n              className=\"settingsInput long\"\r\n              type=\"text\"\r\n              id=\"player2Name\"\r\n              value={player2Name}\r\n              onChange={(e) => setPlayer2Name(e.target.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"settingsDiv\">\r\n          <div className=\"labelInput\">\r\n            <label className=\"settingsLabel\" htmlFor=\"gridSize\">\r\n              Pelilaudan koko (5-10):{\" \"}\r\n            </label>\r\n            <input\r\n              className=\"settingsInput\"\r\n              type=\"number\"\r\n              id=\"gridSize\"\r\n              value={gridSize}\r\n              onChange={updateGridSize}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div id=\"ship-container\">\r\n          <div className=\"labelInput\">\r\n            <label className=\"settingsLabel\" htmlFor=\"carriers\">\r\n              Lentotukialusten määrä:{\" \"}\r\n            </label>\r\n            <input\r\n              className=\"settingsInput\"\r\n              type=\"number\"\r\n              id=\"carriers\"\r\n              min=\"0\"\r\n              value={carriers}\r\n              onChange={updateCarriers}\r\n            />\r\n          </div>\r\n          <div className=\"labelInput\">\r\n            <label className=\"settingsLabel\" htmlFor=\"battleships\">\r\n              Taistelulaivojen määrä:{\" \"}\r\n            </label>\r\n            <input\r\n              className=\"settingsInput\"\r\n              type=\"number\"\r\n              id=\"battleships\"\r\n              min=\"0\"\r\n              value={battleships}\r\n              onChange={updateBattleships}\r\n            />\r\n          </div>\r\n          <div className=\"labelInput\">\r\n            <label className=\"settingsLabel\" htmlFor=\"cruisers\">\r\n              Risteilijöiden määrä:{\" \"}\r\n            </label>\r\n            <input\r\n              className=\"settingsInput\"\r\n              type=\"number\"\r\n              id=\"cruisers\"\r\n              min=\"0\"\r\n              value={cruisers}\r\n              onChange={updateCruisers}\r\n            />\r\n          </div>\r\n          <div className=\"labelInput\">\r\n            <label className=\"settingsLabel\" htmlFor=\"submarines\">\r\n              Sukellusveneiden määrä:{\" \"}\r\n            </label>\r\n            <input\r\n              className=\"settingsInput\"\r\n              type=\"number\"\r\n              id=\"submarines\"\r\n              min=\"0\"\r\n              value={submarines}\r\n              onChange={updateSubmarines}\r\n            />\r\n          </div>\r\n          <div id=\"destroyerDiv\" className=\"labelInput\">\r\n            <label className=\"settingsLabel\" htmlFor=\"destroyers\">\r\n              Hävittäjien määrä:{\" \"}\r\n            </label>\r\n            <input\r\n              className=\"settingsInput\"\r\n              type=\"number\"\r\n              id=\"destroyers\"\r\n              min=\"0\"\r\n              value={destroyers}\r\n              onChange={updateDestroyers}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div id=\"submitButtonDiv\">\r\n          <button className=\"settings-button\" onClick={submit}>\r\n            Vahvista asetukset\r\n          </button>\r\n          <button className=\"settings-button\" onClick={reset}>\r\n            Nollaa arvot\r\n          </button>\r\n        </div>\r\n        <div id=\"error\">\r\n          <p>{error}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","export const SHIP_IMAGES = {\r\n  carriers: [\r\n    \"./image/Carrier front.png\",\r\n    \"./image/Carrier middle1.png\",\r\n    \"./image/Carrier middle2.png\",\r\n    \"./image/Carrier middle3.png\",\r\n    \"./image/Carrier back.png\",\r\n  ],\r\n  battleships: [\r\n    \"./image/Battleship front.png\",\r\n    \"./image/Battleship middle1.png\",\r\n    \"./image/Battleship middle2.png\",\r\n    \"./image/Battleship back.png\",\r\n  ],\r\n  cruisers: [\r\n    \"./image/Cruiser front.png\",\r\n    \"./image/Cruiser middle.png\",\r\n    \"./image/Cruiser back.png\",\r\n  ],\r\n  submarines: [\r\n    \"./image/Submarine front.png\",\r\n    \"./image/Submarine middle.png\",\r\n    \"./image/Submarine back.png\",\r\n  ],\r\n  destroyers: [\"./image/Destroyer front.png\", \"./image/Destroyer back.png\"],\r\n};\r\n\r\nexport const getShipImage = (type, index) => {\r\n  const shipParts = SHIP_IMAGES[type];\r\n  return shipParts && shipParts[index];\r\n};\r\n","import { ItemTypes } from \"./Setup\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport { getShipImage } from \"../../Game/images\";\r\n\r\n/**\r\n * Renders an individual cell for the drag and drop board\r\n * @param {Object} props\r\n * @returns {JSX.Element}\r\n */\r\nconst Cell = ({\r\n  ship,\r\n  x,\r\n  y,\r\n  squareText,\r\n  isOuter,\r\n  grid,\r\n  isHorizontal,\r\n  nthCell,\r\n  GRID_SIDE_SIZE,\r\n  dropShip,\r\n  canPlace,\r\n  isDragging,\r\n}) => {\r\n  /**\r\n   * Checks if ship can be dropped on target\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {Object} item\r\n   * @returns\r\n   */\r\n  const canDropShip = (x, y, item) => {\r\n    const { size } = item;\r\n    let start;\r\n\r\n    if (isHorizontal) {\r\n      start = y - nthCell;\r\n\r\n      if (start + size > GRID_SIDE_SIZE || start < 1) return false;\r\n\r\n      for (let i = start; i < start + size; i++) {\r\n        if (!grid[i][x].canPlace) return false;\r\n      }\r\n\r\n      return true;\r\n    } else {\r\n      start = x - nthCell;\r\n\r\n      if (start + size > GRID_SIDE_SIZE || start < 1) return false;\r\n\r\n      for (let i = start; i < start + size; i++) {\r\n        if (!grid[y][i].canPlace) return false;\r\n      }\r\n\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const [, drop] = useDrop(\r\n    () => ({\r\n      accept: ItemTypes.SHIP,\r\n      drop: (item) => {\r\n        dropShip(x, y, item);\r\n      },\r\n      canDrop: (item) => canDropShip(x, y, item),\r\n      collect: (monitor) => ({\r\n        isOver: !!monitor.isOver(),\r\n      }),\r\n    }),\r\n    [x, y]\r\n  );\r\n\r\n  const showDenied = !isOuter && !canPlace && isDragging;\r\n\r\n  return (\r\n    <div\r\n      ref={isOuter ? null : drop}\r\n      key={x + \"\" + y + grid}\r\n      className={`DnDCell ${isOuter ? \"outer\" : \"\"} ${\r\n        showDenied ? \"Denied\" : \"\"\r\n      }`}\r\n      x={x}\r\n      y={y}\r\n    >\r\n      {squareText}\r\n      {ship && (\r\n        <div className=\"DnDShip\">\r\n          <div className=\"ShipPart\">\r\n            <img\r\n              className={!ship.isHorizontal ? \"horizontal\" : \"\"}\r\n              src={getShipImage(ship.type, ship.index)}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Cell from \"./Cell\";\r\n\r\n/**\r\n * Renders the board for drag and drop\r\n * @param {Object} props\r\n * @returns {JSX.Element}\r\n */\r\nconst DnDBoard = ({\r\n  gridSize,\r\n  ships,\r\n  setShips,\r\n  isHorizontal,\r\n  nthCell,\r\n  isDragging,\r\n}) => {\r\n  const [grid, setGrid] = useState([]);\r\n  const [rerenders, setRerenders] = useState(0);\r\n\r\n  const chars = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"];\r\n\r\n  const boardStyle = {\r\n    display: \"grid\",\r\n    width: \"max-content\",\r\n    gridTemplateColumns: `repeat(${gridSize}, 1fr)`,\r\n    gridTemplateRows: `repeat(${gridSize}, 1fr)`,\r\n    margin: \"20vh auto\",\r\n    backgroundImage: \"url('./image/ocean.png')\",\r\n  };\r\n\r\n  useEffect(() => {\r\n    setGrid(createGrid());\r\n  }, [ships]);\r\n\r\n  /**\r\n   * Creates an array specifying the board that is to be rendered\r\n   * @returns {Object[][]}\r\n   */\r\n  const createGrid = () => {\r\n    const squares = [];\r\n    for (let y = 0; y < gridSize; y++) {\r\n      const rows = [];\r\n      for (let x = 0; x < gridSize; x++) {\r\n        let isOuter = x === 0 && y === 0; // top-left cell is automatically out\r\n\r\n        let squareText = \"\";\r\n        //if we are on the first row, append characters from A to J inside the squares, depending on j\r\n        if (y === 0 && x !== 0) {\r\n          const index = x - 1;\r\n          squareText = chars[index];\r\n          isOuter = true;\r\n        }\r\n        //if we are the first square of the row, append the row number inside the square\r\n        if (x === 0 && y !== 0) {\r\n          squareText = `${y}`;\r\n          isOuter = true;\r\n        }\r\n\r\n        rows.push({\r\n          x,\r\n          y,\r\n          squareText,\r\n          isOuter,\r\n          isHighlighted: false,\r\n          canPlace: true,\r\n        });\r\n      }\r\n      squares.push(rows);\r\n    }\r\n    drawShipsOnBoard(squares);\r\n    //cells won't receive updated grids without this!\r\n    setRerenders(rerenders + 1);\r\n    return squares;\r\n  };\r\n\r\n  /**\r\n   * Draws ships on a given board\r\n   * @param {Object[][]} board\r\n   */\r\n  const drawShipsOnBoard = (board) => {\r\n    for (let i = 0; i < ships.length; i++) {\r\n      const ship = ships[i];\r\n      for (let j = 0; j < ship.coords.length; j++) {\r\n        const coord = ship.coords[j];\r\n        board[coord.y][coord.x].isHighlighted = true;\r\n\r\n        board[coord.y][coord.x].ship = {\r\n          type: coord.type,\r\n          index: j,\r\n          isHorizontal: coord.isHorizontal,\r\n        };\r\n\r\n        //setting the areas around ship, where other ships can't be placed\r\n        board[coord.y][coord.x].canPlace = false;\r\n        board[coord.y - 1][coord.x].canPlace = false;\r\n        board[coord.y][coord.x - 1].canPlace = false;\r\n        //without if checks, would throw errors when ship is placed besides board borders\r\n        if(coord.y < gridSize -1) board[coord.y + 1][coord.x].canPlace = false;\r\n        if(coord.x < gridSize - 1) board[coord.y][coord.x + 1].canPlace = false;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Function handles ship placement\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {Object} item\r\n   * @returns {void}\r\n   */\r\n  const dropShip = (x, y, item) => {\r\n    const { size, type } = item;\r\n    const shipCoord = [];\r\n\r\n    let start;\r\n\r\n    if (isHorizontal) {\r\n      start = y - nthCell;\r\n      for (let i = start; i < start + size; i++) {\r\n        shipCoord.push({ x: x, y: i, isHorizontal, type });\r\n      }\r\n    } else {\r\n      start = x - nthCell;\r\n      for (let i = start; i < start + size; i++) {\r\n        shipCoord.push({ x: i, y, isHorizontal, type });\r\n      }\r\n    }\r\n\r\n    const newShip = {\r\n      hits: 0,\r\n      type,\r\n      isHorizontal,\r\n      coords: shipCoord,\r\n    };\r\n\r\n    setShips((prev) => [...prev, newShip]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"DnDBoard\" style={boardStyle} key={nthCell}>\r\n      {grid.map((row) => {\r\n        return row.map((cell) => {\r\n          return (\r\n            //avaimessa isHorizontal, jotta <Cell> uudelleen-renderöityy, kun kyseisen propsin arvo vaihtuu\r\n            //cursed solution, i know :)\r\n            <Cell\r\n              key={cell.x + \" \" + cell.y + \" \" + isHorizontal + \"\" + rerenders}\r\n              {...cell}\r\n              grid={grid}\r\n              isHorizontal={isHorizontal}\r\n              nthCell={nthCell}\r\n              GRID_SIDE_SIZE={gridSize}\r\n              dropShip={dropShip}\r\n              isDragging={isDragging}\r\n            />\r\n          );\r\n        });\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DnDBoard;\r\n","import React, { useState } from \"react\";\r\nimport { ItemTypes } from \"./Setup\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { SHIP_IMAGES } from \"../../Game/images\";\r\n\r\n/**\r\n * Return a size corresponding to the type given as an function argument\r\n * @param {*} type\r\n * @returns {number}\r\n */\r\nconst getShipSize = (type) => {\r\n  const sizes = {\r\n    carriers: 5,\r\n    battleships: 4,\r\n    cruisers: 3,\r\n    submarines: 3,\r\n    destroyers: 2,\r\n  };\r\n\r\n  return sizes[type];\r\n};\r\n\r\n/**\r\n * Renders an individual ship for drag and drop\r\n * @param {Object} props\r\n * @returns {JSX.Element}\r\n */\r\nconst Ship = ({ type, isHorizontal, setNthCell, setIsDragging }) => {\r\n  const [dropped, setDropped] = useState(false);\r\n\r\n  const size = getShipSize(type);\r\n\r\n  const [{ isDragging }, drag] = useDrag(() => ({\r\n    type: ItemTypes.SHIP,\r\n    item: () => {\r\n      setIsDragging(true);\r\n      return {\r\n        size,\r\n        type,\r\n      };\r\n    },\r\n    collect: (monitor) => ({\r\n      isDragging: !!monitor.isDragging(),\r\n    }),\r\n    end: (item, monitor) => {\r\n      setIsDragging(false);\r\n      if (monitor.didDrop()) setDropped(true);\r\n    },\r\n  }));\r\n\r\n  /**\r\n   * Fetches the correct image for a geiven ship type\r\n   * @param {*} type\r\n   * @param {*} index\r\n   * @returns\r\n   */\r\n  const getShipImage = (type, index) => {\r\n    const imageArr = SHIP_IMAGES[type];\r\n    return imageArr && imageArr[index];\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"DnDShip\"\r\n      ref={drag}\r\n      style={{\r\n        opacity: isDragging ? 0.5 : 1,\r\n        fontSize: 25,\r\n        fontWeight: \"bold\",\r\n        cursor: \"move\",\r\n        display: dropped ? \"none\" : \"flex\",\r\n        flexDirection: isHorizontal ? \"column\" : \"row\",\r\n        margin: \"10px\",\r\n      }}>\r\n      {Array.from({ length: size }, (v, i) => (\r\n        <div key={i} className=\"ShipPart\" onMouseDown={() => setNthCell(i)}>\r\n          <img\r\n            className={!isHorizontal ? \"horizontal\" : \"\"}\r\n            src={getShipImage(type, i)}\r\n          />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Ship;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\n\r\nimport DnDBoard from \"./DnDBoard\";\r\nimport Ship from \"./Ship\";\r\n\r\nimport \"./Setup.css\";\r\n\r\n//react dnd ItemType for drag and drop\r\nexport const ItemTypes = {\r\n  SHIP: \"ship\",\r\n};\r\n\r\n/**\r\n * Renders the setup screen\r\n * @param {Object} props\r\n * @returns {JSX.Element}\r\n */\r\nconst Setup = (props) => {\r\n  const { shipAmounts, boards } = props.G;\r\n  const gridSize = boards[0].length + 1;\r\n  const totalShips = Object.values(shipAmounts).reduce(\r\n    (acc, curr) => acc + curr,\r\n    0\r\n  );\r\n\r\n  /*\r\n   * Variable for the name of the player whose ships are being setup\r\n   */\r\n  const playerName =\r\n    props.ctx.currentPlayer === \"0\" ? props.G.player1Name : props.G.player2Name;\r\n\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [isHorizontal, setIsHorizontal] = useState(true);\r\n  const [nthCell, setNthCell] = useState(null);\r\n  const [ships, setShips] = useState([]);\r\n\r\n  useEffect(() => {\r\n    function onDown(e) {\r\n      e.preventDefault();\r\n      if (e.key === \"r\" || e.key === \"R\") {\r\n        setIsHorizontal((prev) => !prev);\r\n      }\r\n    }\r\n    window.addEventListener(\"keydown\", onDown);\r\n    return () => window.removeEventListener(\"keydown\", onDown);\r\n  }, []);\r\n\r\n  /**\r\n   * Creates an array containing Ship-components adn return them\r\n   * @returns {JSX.Element[]}\r\n   */\r\n  const renderDraggableShips = () => {\r\n    const shipArr = Object.keys(shipAmounts);\r\n\r\n    const arr = [];\r\n\r\n    for (const shipType of shipArr) {\r\n      const amount = shipAmounts[shipType];\r\n\r\n      for (let i = 0; i < amount; i++) {\r\n        arr.push(\r\n          <Ship\r\n            key={shipType + i}\r\n            type={shipType}\r\n            isHorizontal={isHorizontal}\r\n            setNthCell={setNthCell}\r\n            setIsDragging={setIsDragging}\r\n          />\r\n        );\r\n      }\r\n    }\r\n\r\n    return arr;\r\n  };\r\n\r\n  return (\r\n    <DndProvider backend={HTML5Backend}>\r\n      <div className=\"Setup\">\r\n        <div className=\"ShipPool\">\r\n          <button\r\n            onClick={() => props.events.setPhase(\"settings\")}\r\n            title=\"Takaisin\"\r\n            className=\"back-button\">\r\n            <img src=\"./icons/arrow-left.svg\" />\r\n          </button>\r\n          <h2 id=\"setShip\">Asetetaan laivoja pelaajalle {playerName}</h2>\r\n          <p>Voit kääntää laivoja painamalla r-näppäintä</p>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: isHorizontal ? \"row\" : \"column\",\r\n              flexWrap: \"wrap\",\r\n            }}\r\n            className=\"ship-container\">\r\n            {renderDraggableShips()}\r\n          </div>\r\n          <div>\r\n            <button\r\n              className=\"confirm-button\"\r\n              onClick={() => props.moves.submitShips(ships)}\r\n              disabled={ships.length < totalShips}>\r\n              Vahvista laivojen sijainti!\r\n            </button>\r\n            <button className=\"confirm-button\" onClick={() => props.undo()}>\r\n              Aseta laivat uudelleen\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"board-area\">\r\n          <DnDBoard\r\n            gridSize={gridSize}\r\n            ships={ships}\r\n            setShips={setShips}\r\n            isHorizontal={isHorizontal}\r\n            nthCell={nthCell}\r\n            isDragging={isDragging}\r\n          />\r\n        </div>\r\n      </div>\r\n    </DndProvider>\r\n  );\r\n};\r\n\r\nexport default Setup;\r\n","import { useEffect, useState } from \"react\";\r\n\r\n/**\r\n * Custom React hook to play sound effects in a component.\r\n * Returns two functions to start and stop playback of the audio clip.\r\n * @param {object} opts { url, volume, resetOnPlay }\r\n * url (string): path to audio file,\r\n * volume (number): between 0 and 1\r\n * @returns {[play, stop]} [play, stop]\r\n */\r\nexport const useSfx = ({ url, volume }) => {\r\n  const [audio] = useState(new Audio(url));\r\n  const [playing, setPlaying] = useState(false);\r\n\r\n  useEffect(() => {\r\n    audio.volume = volume ?? 0.075; // default to 7.5% volume\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (playing) audio.play();\r\n    if (!playing) {\r\n      audio.pause();\r\n      audio.currentTime = 0;\r\n    }\r\n  }, [playing]);\r\n\r\n  // update status of playing\r\n  useEffect(() => {\r\n    audio.addEventListener(\"ended\", () => setPlaying(false));\r\n    return () => {\r\n      audio.removeEventListener(\"ended\", () => setPlaying(false));\r\n    };\r\n  }, [playing]);\r\n\r\n  const play = () => setPlaying(true);\r\n  const stop = () => setPlaying(false);\r\n  return [play, stop];\r\n};\r\n","import { Link } from \"react-router-dom\";\r\nimport \"./WinScreen.css\";\r\n\r\n/**\r\n * Winscreen-component represents the end of the game when the winner is announced\r\n * and the players are asked if they want to play again or stop playing.\r\n * @param {Object} game boardgame.io\r\n * @param {Object} setShowWinScreen method to show the win screen\r\n * @returns\r\n */\r\nconst WinScreen = ({ game, setShowWinScreen }) => {\r\n  const playerName =\r\n    game.ctx.currentPlayer === \"0\" ? game.G.player1Name : game.G.player2Name;\r\n\r\n  const newGame = () => {\r\n    game.moves.resetGame();\r\n  };\r\n\r\n  /*\r\n   * Layout of the win screen\r\n   */\r\n  return (\r\n    <div id=\"winScreenContainer\">\r\n      <div className=\"WinScreen\">\r\n        <button id=\"close-button\" onClick={() => setShowWinScreen(false)}>\r\n          <img src=\"./icons/x.svg\" />\r\n        </button>\r\n        <h1 className=\"title ws\">{playerName} voitti pelin!</h1>\r\n        <div id=\"wsButtonContainer\">\r\n          <Link to=\"/play\">\r\n            <button className=\"home-button ws\" onClick={newGame}>\r\n              Pelaa uudestaan!\r\n            </button>\r\n          </Link>\r\n          <Link to=\"/\">\r\n            <button className=\"home-button ws\">Lopeta pelaaminen</button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WinScreen;\r\n","import { SHIP_IMAGES } from \"../../Game/images\";\r\n\r\nconst Board = ({ game, playerNum }) => {\r\n  const isOwnBoard = parseInt(game.ctx.currentPlayer) === playerNum;\r\n\r\n  const size = game.G.boards[playerNum].length + 1;\r\n  const board = game.G.boards[playerNum];\r\n  const ownShips = playerNum === 0 ? game.G.shipsPlayer1 : game.G.shipsPlayer2;\r\n\r\n  const playerName = playerNum === 0 ? game.G.player1Name : game.G.player2Name;\r\n\r\n  const chars = Math.random() < 0.05 ? \"HELLOWORLD\" : \"ABCDEFGHIJ\";\r\n\r\n  const boardStyle = {\r\n    gridTemplateColumns: `repeat(${size}, 1fr)`,\r\n    gridTemplateRows: `repeat(${size}, max-content)`,\r\n    backgroundImage: \"url('./image/ocean.png')\",\r\n  };\r\n\r\n  const createGrid = () => {\r\n    const squares = [];\r\n    for (let y = 0; y < size; y++) {\r\n      const rows = [];\r\n      for (let x = 0; x < size; x++) {\r\n        let isOuter = x === 0 && y === 0; // top-left cell is automatically out\r\n\r\n        let squareText = \"\";\r\n        //if we are on the first row, append characters from A to J inside the squares, depending on j\r\n        if (y === 0 && x !== 0) {\r\n          const index = x - 1;\r\n          squareText = chars[index];\r\n          isOuter = true;\r\n        }\r\n        //if we are the first square of the row, append the row number inside the square\r\n        if (x === 0 && y !== 0) {\r\n          squareText = `${y}`;\r\n          isOuter = true;\r\n        }\r\n\r\n        const isHit = !isOuter ? board[x - 1][y - 1] !== null : false;\r\n\r\n        // subtract 1 from x and y because of the extra cells on the left and top\r\n        rows.push({ x, y, squareText, isOuter, isHit });\r\n      }\r\n      //dont push the first row, because it's not part of the game area\r\n      squares.push(rows);\r\n    }\r\n    return squares;\r\n  };\r\n\r\n  const getShipAtCoords = (cell) => {\r\n    const { x, y } = cell;\r\n    return ownShips.find((ship) =>\r\n      ship.coords.find((coords) => coords.x === x && coords.y === y)\r\n    );\r\n  };\r\n\r\n  const cellOnClick = (cell) => {\r\n    if (isOwnBoard) return;\r\n\r\n    game.moves.clickCell({\r\n      coords: { x: cell.x - 1, y: cell.y - 1 },\r\n      targetPlayer: playerNum,\r\n    });\r\n  };\r\n\r\n  const renderShip = (cell) => {\r\n    const ship = getShipAtCoords(cell);\r\n    if (!ship) return null;\r\n\r\n    const index = ship.coords.findIndex(\r\n      (c) => c.x === cell.x && c.y === cell.y\r\n    );\r\n    const isHorizontal = !ship.isHorizontal; // huoh, isHorizontalia pitää käyttää näin päin koska spagetti muualla\r\n\r\n    return (\r\n      <img\r\n        className={isHorizontal ? \"horizontal\" : \"\"}\r\n        src={getShipImage(ship.type, index)}\r\n      />\r\n    );\r\n  };\r\n\r\n  // returns a ship image\r\n  const getShipImage = (type, index) => {\r\n    return SHIP_IMAGES[type] && SHIP_IMAGES[type][index];\r\n  };\r\n\r\n  // true if the cell has a sunken ship in it\r\n  const cellIsSunk = (cell) => getShipAtCoords(cell)?.sunk;\r\n\r\n  // true if the cell should render the ship part it has\r\n  const showShip = (cell) => cellIsSunk(cell) || isOwnBoard;\r\n\r\n  // calculates the cell's classnames based on its state\r\n  const cellClassName = (cell) => {\r\n    const outer = cell.isOuter ? \" outer\" : \"\";\r\n    const clicked = cell.isHit ? \" clicked\" : \"\";\r\n    const hitShip = clicked && getShipAtCoords(cell) ? \" hit\" : \"\";\r\n\r\n    return `BoardCell${outer}${clicked}${hitShip}`;\r\n  };\r\n\r\n  const gameIsOver = game.G.message.type === \"gameOver\";\r\n\r\n  return (\r\n    <div className=\"BoardContainer\">\r\n      <div className={`Board ${isOwnBoard ? \"own\" : \"\"}`} style={boardStyle}>\r\n        {createGrid().map((row) => {\r\n          return row.map((cell) => (\r\n            <div\r\n              className={cellClassName(cell)}\r\n              key={cell.x + \"\" + cell.y}\r\n              onClick={() => !gameIsOver && cellOnClick(cell)}>\r\n              <div className=\"OuterText\">{cell.squareText}</div>\r\n              {showShip(cell) && <div className=\"Ship\">{renderShip(cell)}</div>}\r\n            </div>\r\n          ));\r\n        })}\r\n      </div>\r\n      <h2 className=\"PlayerName\">{playerName}</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSfx } from \"../../util/useAudio\";\r\nimport WinScreen from \"../WinScreen/WinScreen\";\r\nimport Board from \"./Board\";\r\nimport \"./Board.css\";\r\n\r\n/**\r\n * React-component that renders both players' boards.\r\n * Shown at the phase where players shoot at each others' ships.\r\n * @param {*} game\r\n */\r\nconst Play = (game) => {\r\n  const message = game.G.message;\r\n\r\n  const [showWinScreen, setShowWinScreen] = useState(false);\r\n\r\n  const [playHit] = useSfx({\r\n    url: \"./assets/explosion_effect.mp3\",\r\n    volume: 0.12,\r\n  });\r\n\r\n  const [playSunk] = useSfx({\r\n    url: \"./assets/ship_sunk.mp3\",\r\n    volume: 0.2,\r\n  });\r\n\r\n  const [playGameOver] = useSfx({\r\n    url: \"./assets/water_splash.mp3\",\r\n    volume: 0.4,\r\n  });\r\n\r\n  // Play sound effects based on message changes\r\n  useEffect(() => {\r\n    let timeouts = [];\r\n\r\n    switch (message.type) {\r\n      default:\r\n      case \"nohit\":\r\n        return;\r\n\r\n      case \"hit\":\r\n        playHit();\r\n        break;\r\n\r\n      case \"sunk\":\r\n        playHit();\r\n        timeouts.push(setTimeout(playSunk, 1000));\r\n        break;\r\n\r\n      case \"gameOver\":\r\n        playHit();\r\n        timeouts.push(setTimeout(playSunk, 1000));\r\n        timeouts.push(setTimeout(() => setShowWinScreen(true), 3000));\r\n        playGameOver();\r\n        break;\r\n    }\r\n\r\n    return () => timeouts.forEach((t) => clearTimeout(t));\r\n  }, [message.type]);\r\n\r\n  return (\r\n    <>\r\n      <Link to=\"/\">\r\n        <button title=\"Takaisin\" className=\"back-button play\">\r\n          Lopeta peli\r\n        </button>\r\n      </Link>\r\n      <div id=\"message\">\r\n        <h2>{!showWinScreen && message.text}</h2>\r\n      </div>\r\n      <div className=\"BattleshipBoards\">\r\n        <Board game={game} playerNum={0} />\r\n        <Board game={game} playerNum={1} />\r\n      </div>\r\n      {showWinScreen && (\r\n        <WinScreen game={game} setShowWinScreen={setShowWinScreen} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Play;\r\n","import \"./ChangeScreen.css\";\r\n\r\n/**\r\n * Overlay component to render when players are switching seats.\r\n * Shows the name of the player that is up next and a button to start the turn\r\n * @param {object} props { hide, playerNum, game }\r\n */\r\nconst ChangeScreen = ({ hide, playerNum, game }) => {\r\n  const playerName = playerNum === 1 ? game.G.player1Name : game.G.player2Name;\r\n\r\n  return (\r\n    <div className=\"ChangeScreen\">\r\n      <div id=\"turn\">\r\n        <h1>Vuorossa: {playerName}</h1>\r\n        <button className=\"home-button\" onClick={hide}>\r\n          Aloita vuoro\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChangeScreen;\r\n","import Settings from \"./Settings/Settings\";\r\nimport Setup from \"./Setup/Setup\";\r\nimport Play from \"./Play/Play\";\r\nimport { useLayoutEffect, useRef, useState } from \"react\";\r\nimport ChangeScreen from \"./ChangeScreen/ChangeScreen\";\r\n\r\n/**\r\n * Renderöi pelaajien laudat\r\n * @param {*} props\r\n * @returns\r\n */\r\nconst GameRenderer = (props) => {\r\n  const [showOverlay, setShowOverlay] = useState(false);\r\n\r\n  useLayoutEffect(() => {\r\n    if (props.ctx.phase !== \"play\") return;\r\n\r\n    setShowOverlay(true); // näyttää peliruudun kun pelaaja vaihtuu\r\n  }, [props.ctx.currentPlayer, props.ctx.phase]);\r\n\r\n  const Game = () => {\r\n    switch (props.ctx.phase) {\r\n      default:\r\n      case \"settings\":\r\n        return <Settings game={props} />;\r\n\r\n      case \"setup\":\r\n        return <Setup {...props} />;\r\n\r\n      case \"play\":\r\n        return <Play {...props} />;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Renderöi pelaajan vaihtoruudun silloin kun täytyy\r\n   */\r\n  if (showOverlay) {\r\n    return (\r\n      <ChangeScreen\r\n        playerNum={parseInt(props.ctx.currentPlayer) + 1}\r\n        hide={() => setShowOverlay(false)}\r\n        game={props}\r\n      />\r\n    );\r\n  }\r\n\r\n  return <Game />;\r\n};\r\n\r\nexport default GameRenderer;\r\n","import { Link } from \"react-router-dom\";\r\n\r\n/*\r\n * React-component for the home page\r\n */\r\nconst Home = () => {\r\n  return (\r\n    <div id=\"home-bg\">\r\n      <h1 className=\"title\">Laivanupotus</h1>\r\n      <div id=\"home-button-container\">\r\n        <Link to=\"/play\">\r\n          <button className=\"home-button\">Aloita peli</button>\r\n        </Link>\r\n        <Link to=\"/help\">\r\n          <button className=\"home-button\">Ohjeet</button>\r\n        </Link>\r\n        <Link to=\"/credits\">\r\n          <button className=\"home-button\">Tekijät</button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { Link } from \"react-router-dom\";\r\n\r\n/*\r\n * React-component for the Help-page\r\n */\r\nconst Help = () => {\r\n  return (\r\n    <div id=\"help-div\">\r\n      <Link to=\"/\">\r\n        <button title=\"Takaisin\" className=\"back-button\">\r\n          <img src=\"./icons/arrow-left.svg\" />\r\n        </button>\r\n      </Link>\r\n      <h1 className=\"title\">Ohjeet</h1>\r\n      <h2 className=\"sub-title\">Mikä on laivanupotus?</h2>\r\n      <p className=\"help-text\">\r\n        Laivanupotus on kahden pelaajan peli, jossa molemmilla pelaajilla on oma\r\n        peliruudukko, jolle he asettavat laivansa. Laivoja on eri pituisia, ja\r\n        niitä voi olla eri määrä pelistä riippuen. Pelaajat eivät näe toistensa\r\n        laivoja. Pelaajat ampuvat vuorotellen toistensa laudoille valitsemalla\r\n        ruudun, johon he haluavat ampua. Pelaaja saa uuden vuoron, jos hän osuu\r\n        vastustajansa laivaan. Laiva uppoaa, kun sen jokaiseen ruutuun on\r\n        osuttu. Peli loppuu, kun jomman kumman pelaajan kaikki laivat ovat\r\n        uponneet. Pelin voittaa siis se pelaaja, joka saa upotettua kaikki\r\n        vastustajansa laivat ensimmäisenä.\r\n      </p>\r\n      <h2 className=\"sub-title\">Miten voin pelata laivanupotusta?</h2>\r\n      <p className=\"help-text\">\r\n        Voit aloittaa pelin painamalla \"Aloita peli\"-nappia{\" \"}\r\n        <Link to=\"/\">\r\n          <a id=\"body-link\">kotisivulla</a>\r\n        </Link>\r\n        . Ensimmäiseksi pelille valitaan asetukset, eli pelaajien nimet,\r\n        pelilaudan koko ja eri alustyyppien määrät. Kun olet tyytyväinen pelin\r\n        asetuksiin, voit siirtyä asettamaan laivoja paikoilleen painamalla\r\n        \"Vahvista asetukset\"-nappia.\r\n      </p>\r\n      <br></br>\r\n      <p className=\"help-text\">\r\n        Laivat asetetaan vuorotellen; ensin pelaajalle 1, sitten pelaajalle 2.\r\n        Kun pelaaja asettaa laivojaan, ei toinen pelaaja saa nähdä ruutua.\r\n        Laivat asetetaan paikoilleen vetämällä ne haluttuun kohtaan\r\n        pelilaudalla. Laivoja voi kääntää ennen siirtoa painamalla r-näppäintä.\r\n        Laivat eivät saa olla vierekkäisissä ruuduissa. Nämä ns. kielletty\r\n        ruudut on merkitty punaisella, etkä voi asettaa laivoja siten, että ne\r\n        ovat kyseisillä ruuduilla. Kun pelaaja 1 on asettanut laivat\r\n        mieleisilleen paikoille, hän voi antaa vuoron seuraavalle pelaajalle\r\n        painamalla \"Vahvista laivojen sijainti!\"-nappia.\r\n      </p>\r\n      <br></br>\r\n      <p className=\"help-text\">\r\n        Kun kumpikin pelaaja on asettanut laivansa, itse peli alkaa. Vuoro alkaa\r\n        aina painamalla \"Aloita vuoro\"-nappia. (Toinen pelaaja ei saa nähä\r\n        tietokoneruutua toisen pelaajan vuorolla!) Jokaisella vuorolla pelaaja\r\n        näkee sekä oman että vastustajan pelilaudan. Pelaajan tulee ampua\r\n        vastustajan laudalle klikkaamalla sitä ruutua, johon haluaa ampua. Jos\r\n        pelaaja osuu vastustajan laivaan, merkitään se ruudulle punaisella\r\n        ruksilla, ja pelaaja saa uuden vuoron. Jos pelaaja upottaa vastustajan\r\n        laivan, laiva tulee näkyviin ruudulle ja pelaaja saa uuden vuoron. Vuoro\r\n        vaihtuu, kun pelaaja tekee hutiammunnan. Huti näkyy pelilaudalla\r\n        valkoisena ruksina.\r\n      </p>\r\n      <br></br>\r\n      <p className=\"help-text\">\r\n        Peli päättyy, kun toisen pelaajan kaikki laivat ovat uponneet. Voittaja\r\n        julistetaan, ja voit aloittaa uuden pelin painamalla \"Pelaa\r\n        uudestaan!\"-nappia, tai lopettaa pelaamisen painamalla \"Lopeta\r\n        pelaaminen\"-nappia.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Help;\r\n","import { Link } from \"react-router-dom\";\r\n\r\n/*\r\n * React-component for the Credits-page\r\n */\r\nconst Credits = () => {\r\n  return (\r\n    <div>\r\n      <Link to=\"/\">\r\n        <button title=\"Takaisin\" className=\"back-button\">\r\n          <img src=\"./icons/arrow-left.svg\" />\r\n        </button>\r\n      </Link>\r\n      <h1 className=\"title\">Tekijät</h1>\r\n      <div id=\"credits-container\">\r\n        <h2 className=\"credit-name\">Juhana - Drag and Drop</h2>\r\n        <h2 className=\"credit-name\">Juho - Grafiikat</h2>\r\n        <h2 className=\"credit-name\">Matias - Laivanupotus</h2>\r\n        <h2 className=\"credit-name\">\r\n          Millina - Menu, Setup Form ja Pelin loppuminen\r\n        </h2>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Credits;\r\n","import { useEffect, useRef } from \"react\";\r\nimport { Client } from \"boardgame.io/react\";\r\nimport { Route, BrowserRouter, Switch } from \"react-router-dom\";\r\nimport Game from \"./Game/Game\";\r\nimport GameRenderer from \"./components/GameRenderer\";\r\nimport Home from \"./components/Home/Home\";\r\nimport Help from \"./components/Help/Help\";\r\nimport Credits from \"./components/Credits/Credits\";\r\nimport \"./Home.css\";\r\n\r\n/**\r\n * The app component renders everything\r\n * @returns {JSX.Element}\r\n */\r\nconst App = () => {\r\n  const GameComponent = Client({\r\n    game: Game,\r\n    board: GameRenderer,\r\n    numPlayers: 2,\r\n    debug: false,\r\n  });\r\n\r\n  const bgMusicRef = useRef();\r\n\r\n  //audio volume\r\n  useEffect(() => {\r\n    bgMusicRef.current.volume = 0.05;\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <BrowserRouter basename=\"/Laivanupotus/\">\r\n        <Switch>\r\n          <Route path=\"/\" exact>\r\n            <Home />\r\n          </Route>\r\n          <Route path=\"/play\">\r\n            <GameComponent />\r\n          </Route>\r\n          <Route path=\"/help\">\r\n            <Help />\r\n          </Route>\r\n          <Route path=\"/credits\">\r\n            <Credits />\r\n          </Route>\r\n        </Switch>\r\n      </BrowserRouter>\r\n      <audio\r\n        autoPlay\r\n        ref={bgMusicRef}\r\n        loop\r\n        src=\"./assets/battleship_music.mp3\"></audio>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}